{% set version="4.0.1" %}
{% set native_compiler_subdir=build_platform %}
{% set cctools_version = '895' %}
{% set cctools_sha256 = 'ce66034fa35117f9ae76bbb7dd72d8068c405778fa42e877e8a13237a10c5cb7' %}

package:
  name: llvm
  version: {{ version }}

source:
  # - git_url: https://github.com/llvm/llvm
  #   git_tag: master
  - url: http://releases.llvm.org/{{ version }}/llvm-{{ version }}.src.tar.xz
  - url: http://releases.llvm.org/{{ version }}/cfe-{{ version }}.src.tar.xz
    folder: tools/clang
  - url: http://releases.llvm.org/{{ version }}/compiler-rt-{{ version }}.src.tar.xz
    folder: projects/compiler-rt
    patches:
      - 0001-cmake-Cache-results-of-find_darwin_sdk_dir.patch
      - 0002-compiler-rt-Determine-COMPILER_RT_SUPPORTED_ARCH-eve.patch
  - url: http://releases.llvm.org/{{ version }}/libcxx-{{ version }}.src.tar.xz
    folder: projects/libcxx
  - url: http://releases.llvm.org/{{ version }}/libcxxabi-{{ version }}.src.tar.xz
    folder: projects/libcxxabi
  - url: http://releases.llvm.org/{{ version }}/openmp-{{ version }}.src.tar.xz
    folder: projects/openmp
  - url: http://releases.llvm.org/{{ version }}/polly-{{ version }}.src.tar.xz
    folder: tools/polly
  - url: https://opensource.apple.com/tarballs/cctools/cctools-{{ cctools_version }}.tar.gz
    folder: cctools
    sha256: {{ cctools_sha256 }}
    patches:
      - 001-remove_static_part.patch
      - 100-add_sdkroot_headers.patch
      - 110-import_to_include.patch
      - 120-fix_time_bugs.patch
      - 130-add_compileguards.patch
      - 140-remove_sysctl_osversion_detection.patch
      - 160-map_64bit_arches.patch
      - 170-fix_printf_format_bugs.patch
      - 180-add_CROSS_SYSROOT.patch
      - 190-default_arch.patch
      - 210-dont_typedef_NxConstantString.patch
      - 220-cross_prefixes_and_EXEEXT.patch
      - 230-progname_fixes.patch
      - 240-use_strerror.patch
      - 250-dont_assume_getattrlist.patch
      - 260-ppc64_reenable.patch
      - 270-dont_assume_vm_sync.patch
      - 280-missing_includes.patch
      - 290-error_as_weak_symbol.patch
      - 300-undef___unused_for_sysctl.patch
      - 340-win_O_BINARY.patch
      - 350-win_fileio_mode.patch
      - 360-win_TMPDIR_to_TEMP.patch
      - 370-win_execute.patch
      - 380-win_avoid_mmap_ofile.patch
      - 400-cctools-_WIN64-fixes.patch
      - 410-remove_inc_arch_sparc_reg_h_PC.patch
      - 420-autoconfiscate.patch

    # Because macOS 10.9's clang is too old (problems with atomics)
  - url: http://releases.llvm.org/4.0.1/clang+llvm-4.0.1-x86_64-apple-darwin.tar.xz                       [osx]
    folder: bootstrap                                                                                     [osx]
  - url: https://github.com/phracker/MacOSX-SDKs/releases/download/MacOSX10.11.sdk/MacOSX10.9.sdk.tar.xz  [osx]
    folder: bootstrap/MacOSX10.9.sdk                                                                      [osx]

requirements:
  build:
    # we use selectors rather than jinja2 here because we only want to use the native
    #   compiler to build llvm and clang (which are natively cross-compilers.)
    # We might want to split the runtime libs below into a separate recipe,
    #    so that this recipe can use jinja2 instead.
    - gcc_{{ native_compiler_subdir }}  [linux]
    - gxx_{{ native_compiler_subdir }}  [linux]
    # - {{ compiler('c') }}  [linux]
    # - {{ compiler('cxx') }}  [linux]
    - cmake
    - autoconf
    - automake
    - libuuid

outputs:

  - name: cctools
    script: install-cctools.sh
    requirements:
      host:
        - {{ pin_subpackage('llvm_' ~ library_type, exact=True) }}
      run:
        - {{ pin_subpackage('llvm_' ~ library_type, exact=True) }}

  - name: llvm_{{library_type}}
    script: install-llvm.sh
    requirements:
      build:
        - cmake
        # these are here so that the run_exports functionality of conda-build 3 works.
        - {{ pin_compatible('gcc_' ~ native_compiler_subdir, exact=True) }}  [linux]
        - {{ pin_compatible('gxx_' ~ native_compiler_subdir, exact=True) }}  [linux]

  - name: clang
    script: install-clang.sh
    requirements:
      build:
        - {{ pin_subpackage('llvm_' ~ library_type, exact=True) }}
      run:
        - {{ pin_subpackage('llvm_' ~ library_type, exact=True) }}

  # metapackages that make it easier to cross-compile
  - name: clang_{{library_type}}_{{ target_platform }}
    script: install-clang-wrapper.sh
    requirements:
      build:
        - {{ pin_subpackage('clang_' ~ library_type ~ '_' ~ target_platform, exact=True) }}
      run:
        - {{ pin_subpackage('clang_' ~ library_type ~ '_' ~ target_platform, exact=True) }}
        # we can't pin binutils, because we have no way of knowing what the
        # correct version is on the target platform.
        - binutils_{{ target_platform }}  [linux]
    {% if library_type == 'shared' %}
    run_exports:
      - {{ pin_subpackage('compiler-rt_' ~ target_platform) }}
      - {{ pin_subpackage('libcxx_' ~ target_platform) }}
    {% endif %}

  - name: libcxxabi_{{ target_platform }}
    target: {{ target_platform }}
    script: install-libcxxabi.sh
    requirements:
      build:
        - cmake
        - {{ pin_subpackage('clang_' ~ library_type ~ '_' ~ target_platform, exact=True) }}

  - name: libcxx_{{ target_platform }}
    target: {{ target_platform }}
    script: install-libcxx.sh
    requirements:
      build:
        - cmake
        - {{ pin_subpackage('clang_' ~ library_type ~ '_' ~ target_platform, exact=True) }}

  - name: compiler-rt_{{ target_platform }}
    script: install-compiler-rt.sh
    target: {{ target_platform }}
    run_exports:
      - {{ pin_subpackage('compiler-rt_' ~ target_platform) }}
    requirements:
      build:
        - cmake
        - {{ pin_subpackage('clang_' ~ library_type ~ '_' ~ target_platform, exact=True) }}
