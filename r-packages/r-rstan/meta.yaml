{% set version = '2.15.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rstan
  version: {{ version|replace("-", "_") }}

source:
  fn: rstan_{{ version }}.tar.gz
  url:
    - https://cran.r-project.org/src/contrib/rstan_{{ version }}.tar.gz
    - https://cran.r-project.org/src/contrib/Archive/rstan/rstan_{{ version }}.tar.gz


  sha256: 2f3f68adbfd364713fb1e8b87ddde03b258abbf0dbb120cdbbbc31fc5bec71eb
  # patches:
   # List any patch files here
   # - fix.patch

build:
  # If this is a new build for the same version, increment the build number.
  number: 0

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: RUnit, RcppEigen, BH (>= 1.62), parallel, KernSmooth, loo (>= 1.0.0), shinystan (>= 2.2.1), bayesplot, rstantools, rstudioapi, Matrix, knitr (>= 1.15.1)
requirements:
  build:
    - r-base
    - r-bh >=1.62
    - r-rcpp >=0.12.0
    - r-rcppeigen
    - r-stanheaders >=2.15.0
    - r-ggplot2 >=2.0.0
    - r-gridextra >=2.0.0
    - r-inline
    - posix                # [win]
    - {{native}}toolchain  # [win]
    - gcc                  # [not win]

  run:
    - r-base
    - r-bh >=1.62
    - r-rcpp >=0.12.0
    - r-rcppeigen
    - r-stanheaders >=2.15.0
    - r-ggplot2 >=2.0.0
    - r-gridextra >=2.0.0
    - r-inline
    - {{native}}gcc-libs   # [win]
    - libgcc               # [not win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('rstan')"  # [not win]
    - "\"%R%\" -e \"library('rstan')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://groups.google.com/forum/#!forum/stan-users, http://mc-stan.org
  license: GPL (>= 3)
  summary: User-facing R functions are provided to parse, compile, test,  estimate, and analyze
    Stan models by accessing the header-only Stan library  provided by the 'StanHeaders'
    package. The Stan project develops a probabilistic programming language that implements
    full Bayesian statistical  inference via Markov Chain Monte Carlo, rough Bayesian
    inference via 'variational' approximation, and (optionally penalized) maximum likelihood
    estimation via  optimization. In all three cases, automatic differentiation is used
    to quickly  and accurately evaluate gradients without burdening the user with the
    need  to derive the partial derivatives.
  license_family: GPL3

# The original CRAN metadata for this package was:

# Package: rstan
# Type: Package
# Title: R Interface to Stan
# Version: 2.15.1
# Date: 2017-04-19
# Authors@R: c(person("Jiqiang", "Guo", email = "guojq28@gmail.com", role = "aut"), person("Jonah", "Gabry", email = "jsg2201@columbia.edu", role = "aut"), person("Ben", "Goodrich", email = "benjamin.goodrich@columbia.edu", role = c("cre", "aut")), person("Daniel", "Lee", role = "ctb"), person("Krzysztof", "Sakrejda", role = "ctb"), person("Trustees of", "Columbia University", role = "cph"), person("Oleg", "Sklyar", role = "cph", comment = "R/cxxfunplus.R"), person("The R", "Core Team", role = "cph", comment = "R/pairs.R, R/dynGet.R"), person("Jens", "Oehlschlaegel-Akiyoshi", role = "cph", comment = "R/pairs.R"), person("Hadley", "Wickham", role = "cph", comment = "R/rtools.R"), person("Joel", "de Guzman", role = "cph", comment = "Boost"), person("John", "Fletcher", role = "cph",  comment = "Boost"), person("Thomas", "Heller", role = "cph",  comment = "Boost"), person("Eric", "Niebler", role = "cph",   comment = "Boost"))
# Description: User-facing R functions are provided to parse, compile, test,  estimate, and analyze Stan models by accessing the header-only Stan library  provided by the 'StanHeaders' package. The Stan project develops a probabilistic programming language that implements full Bayesian statistical  inference via Markov Chain Monte Carlo, rough Bayesian inference via 'variational' approximation, and (optionally penalized) maximum likelihood estimation via  optimization. In all three cases, automatic differentiation is used to quickly  and accurately evaluate gradients without burdening the user with the need  to derive the partial derivatives.
# License: GPL (>= 3)
# NeedsCompilation: yes
# Imports: methods, stats4, inline, gridExtra (>= 2.0.0), Rcpp (>= 0.12.0)
# Depends: R (>= 3.0.2), ggplot2 (>= 2.0.0), StanHeaders (>= 2.15.0)
# LinkingTo: Rcpp (>= 0.12.0), RcppEigen, BH (>= 1.62), StanHeaders (>= 2.15.0)
# Suggests: RUnit, RcppEigen, BH (>= 1.62), parallel, KernSmooth, loo (>= 1.0.0), shinystan (>= 2.2.1), bayesplot, rstantools, rstudioapi, Matrix, knitr (>= 1.15.1)
# URL: https://groups.google.com/forum/#!forum/stan-users, http://mc-stan.org
# BugReports: https://github.com/stan-dev/rstan/issues/
# VignetteBuilder: knitr
# SystemRequirements: pandoc
# Packaged: 2017-04-19 05:03:57 UTC; goodrich
# Author: Jiqiang Guo [aut], Jonah Gabry [aut], Ben Goodrich [cre, aut], Daniel Lee [ctb], Krzysztof Sakrejda [ctb], Trustees of Columbia University [cph], Oleg Sklyar [cph] (R/cxxfunplus.R), The R Core Team [cph] (R/pairs.R, R/dynGet.R), Jens Oehlschlaegel-Akiyoshi [cph] (R/pairs.R), Hadley Wickham [cph] (R/rtools.R), Joel de Guzman [cph] (Boost), John Fletcher [cph] (Boost), Thomas Heller [cph] (Boost), Eric Niebler [cph] (Boost)
# Maintainer: Ben Goodrich <benjamin.goodrich@columbia.edu>
# Repository: CRAN
# Date/Publication: 2017-04-19 09:15:39 UTC

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
