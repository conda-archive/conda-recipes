{% set version = '1.3-0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rjsonio
  version: {{ version|replace("-", "_") }}

source:
  fn: RJSONIO_{{ version }}.tar.gz
  url:
    - https://cran.r-project.org/src/contrib/RJSONIO_{{ version }}.tar.gz
    - https://cran.r-project.org/src/contrib/Archive/RJSONIO/RJSONIO_{{ version }}.tar.gz


  sha256: 119334b7761c6c1c3cec52fa17dbc1b72eaebb520c53e68d873dea147cf48fb7
  # patches:
   # List any patch files here
   # - fix.patch

build:
  # If this is a new build for the same version, increment the build number.
  number: 2

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/


requirements:
  build:
    - r-base
    - posix                # [win]
    - {{native}}toolchain  # [win]
    - gcc                  # [not win]

  run:
    - r-base
    - {{native}}gcc-libs   # [win]
    - libgcc               # [not win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('RJSONIO')"  # [not win]
    - "\"%R%\" -e \"library('RJSONIO')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=RJSONIO
  license: BSD_3_clause + file LICENSE
  summary: This is a package that allows conversion to and from  data in Javascript object notation
    (JSON) format. This allows R objects to be inserted into Javascript/ECMAScript/ActionScript
    code and allows R programmers to read and convert JSON content to R objects. This
    is an alternative to rjson package. Originally, that was too slow for converting
    large R objects to JSON and was not extensible.  rjson's performance is now similar
    to this package, and perhaps slightly faster in some cases. This package uses methods
    and is readily extensible by defining methods for different classes,  vectorized
    operations, and C code and callbacks to R functions for deserializing JSON objects
    to R.  The two packages intentionally share the same basic interface. This package
    (RJSONIO) has many additional options to allow customizing the generation and processing
    of JSON content. This package uses libjson rather than implementing yet another
    JSON parser. The aim is to support other general projects by building on their work,
    providing feedback and benefit from their ongoing development.
  license_family: BSD

# The original CRAN metadata for this package was:

# Package: RJSONIO
# Version: 1.3-0
# Title: Serialize R objects to JSON, JavaScript Object Notation
# Description: This is a package that allows conversion to and from  data in Javascript object notation (JSON) format. This allows R objects to be inserted into Javascript/ECMAScript/ActionScript code and allows R programmers to read and convert JSON content to R objects. This is an alternative to rjson package. Originally, that was too slow for converting large R objects to JSON and was not extensible.  rjson's performance is now similar to this package, and perhaps slightly faster in some cases. This package uses methods and is readily extensible by defining methods for different classes,  vectorized operations, and C code and callbacks to R functions for deserializing JSON objects to R.  The two packages intentionally share the same basic interface. This package (RJSONIO) has many additional options to allow customizing the generation and processing of JSON content. This package uses libjson rather than implementing yet another JSON parser. The aim is to support other general projects by building on their work, providing feedback and benefit from their ongoing development.
# Note: See http://www.json.org/JSON_checker/test.zip for tests. We now use code from the libjson project (http://libjson.sourceforge.net).
# License: BSD_3_clause + file LICENSE
# Imports: methods
# Author: Duncan Temple Lang
# Maintainer: Duncan Temple Lang <duncan@r-project.org>
# Collate: readJSON.R asVars.R isValid.R json.R simpleHandler.R stream.R
# Biarch: true
# Packaged: 2014-07-28 15:19:10 UTC; ripley
# NeedsCompilation: yes
# Repository: CRAN
# Date/Publication: 2014-07-28 17:26:19

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
